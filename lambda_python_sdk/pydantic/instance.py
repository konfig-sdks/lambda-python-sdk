# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud

    The version of the OpenAPI document: 1.5.1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from lambda_python_sdk.pydantic.instance_name import InstanceName
from lambda_python_sdk.pydantic.instance_type import InstanceType
from lambda_python_sdk.pydantic.region import Region
from lambda_python_sdk.pydantic.ssh_key_name import SshKeyName

class Instance(BaseModel):
    # Unique identifier (ID) of an instance
    id: str = Field(alias='id')

    # The current status of the instance
    status: Literal["active", "booting", "unhealthy", "terminating", "terminated"] = Field(alias='status')

    # Names of the SSH keys allowed to access the instance
    ssh_key_names: typing.List[SshKeyName] = Field(alias='ssh_key_names')

    # Names of the file systems, if any, attached to the instance
    file_system_names: typing.List[str] = Field(alias='file_system_names')

    name: typing.Optional[InstanceName] = Field(None, alias='name')

    # IPv4 address of the instance
    ip: typing.Optional[typing.Optional[str]] = Field(None, alias='ip')

    region: typing.Optional[Region] = Field(None, alias='region')

    instance_type: typing.Optional[InstanceType] = Field(None, alias='instance_type')

    # Hostname assigned to this instance, which resolves to the instance's IP.
    hostname: typing.Optional[typing.Optional[str]] = Field(None, alias='hostname')

    # Secret token used to log into the jupyter lab server hosted on the instance.
    jupyter_token: typing.Optional[typing.Optional[str]] = Field(None, alias='jupyter_token')

    # URL that opens a jupyter lab notebook on the instance.
    jupyter_url: typing.Optional[typing.Optional[str]] = Field(None, alias='jupyter_url')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
