# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud

    The version of the OpenAPI document: 1.5.1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lambda_python_sdk import schemas  # noqa: F401


class ErrorResponseBody(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "error",
        }
        
        class properties:
        
            @staticmethod
            def error() -> typing.Type['Error']:
                return Error
        
            @staticmethod
            def field_errors() -> typing.Type['ErrorResponseBodyFieldErrors']:
                return ErrorResponseBodyFieldErrors
            __annotations__ = {
                "error": error,
                "field_errors": field_errors,
            }
    
    error: 'Error'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'Error': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field_errors"]) -> 'ErrorResponseBodyFieldErrors': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error", "field_errors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> 'Error': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field_errors"]) -> typing.Union['ErrorResponseBodyFieldErrors', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error", "field_errors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        error: 'Error',
        field_errors: typing.Union['ErrorResponseBodyFieldErrors', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ErrorResponseBody':
        return super().__new__(
            cls,
            *args,
            error=error,
            field_errors=field_errors,
            _configuration=_configuration,
            **kwargs,
        )

from lambda_python_sdk.model.error import Error
from lambda_python_sdk.model.error_response_body_field_errors import ErrorResponseBodyFieldErrors
