# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud

    The version of the OpenAPI document: 1.5.1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lambda_python_sdk import schemas  # noqa: F401


class InstanceTypeSpecs(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "memory_gib",
            "vcpus",
            "storage_gib",
        }
        
        class properties:
            vcpus = schemas.IntSchema
            memory_gib = schemas.IntSchema
            storage_gib = schemas.IntSchema
            __annotations__ = {
                "vcpus": vcpus,
                "memory_gib": memory_gib,
                "storage_gib": storage_gib,
            }
    
    memory_gib: MetaOapg.properties.memory_gib
    vcpus: MetaOapg.properties.vcpus
    storage_gib: MetaOapg.properties.storage_gib
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vcpus"]) -> MetaOapg.properties.vcpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_gib"]) -> MetaOapg.properties.memory_gib: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage_gib"]) -> MetaOapg.properties.storage_gib: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["vcpus", "memory_gib", "storage_gib", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vcpus"]) -> MetaOapg.properties.vcpus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_gib"]) -> MetaOapg.properties.memory_gib: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage_gib"]) -> MetaOapg.properties.storage_gib: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vcpus", "memory_gib", "storage_gib", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        memory_gib: typing.Union[MetaOapg.properties.memory_gib, decimal.Decimal, int, ],
        vcpus: typing.Union[MetaOapg.properties.vcpus, decimal.Decimal, int, ],
        storage_gib: typing.Union[MetaOapg.properties.storage_gib, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InstanceTypeSpecs':
        return super().__new__(
            cls,
            *args,
            memory_gib=memory_gib,
            vcpus=vcpus,
            storage_gib=storage_gib,
            _configuration=_configuration,
            **kwargs,
        )
