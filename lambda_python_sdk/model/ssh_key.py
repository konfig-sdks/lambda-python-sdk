# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud

    The version of the OpenAPI document: 1.5.1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lambda_python_sdk import schemas  # noqa: F401


class SshKey(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about a stored SSH key, which can be used to access instances over SSH
    """


    class MetaOapg:
        required = {
            "public_key",
            "name",
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def name() -> typing.Type['SshKeyName']:
                return SshKeyName
        
            @staticmethod
            def public_key() -> typing.Type['SshPublicKey']:
                return SshPublicKey
        
            @staticmethod
            def private_key() -> typing.Type['SshPrivateKey']:
                return SshPrivateKey
            __annotations__ = {
                "id": id,
                "name": name,
                "public_key": public_key,
                "private_key": private_key,
            }
    
    public_key: 'SshPublicKey'
    name: 'SshKeyName'
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'SshKeyName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_key"]) -> 'SshPublicKey': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["private_key"]) -> 'SshPrivateKey': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "public_key", "private_key", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> 'SshKeyName': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_key"]) -> 'SshPublicKey': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["private_key"]) -> typing.Union['SshPrivateKey', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "public_key", "private_key", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        public_key: 'SshPublicKey',
        name: 'SshKeyName',
        id: typing.Union[MetaOapg.properties.id, str, ],
        private_key: typing.Union['SshPrivateKey', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SshKey':
        return super().__new__(
            cls,
            *args,
            public_key=public_key,
            name=name,
            id=id,
            private_key=private_key,
            _configuration=_configuration,
            **kwargs,
        )

from lambda_python_sdk.model.ssh_key_name import SshKeyName
from lambda_python_sdk.model.ssh_private_key import SshPrivateKey
from lambda_python_sdk.model.ssh_public_key import SshPublicKey
